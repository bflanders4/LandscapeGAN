
import tensorflow as tf
import numpy as np
import pathlib


# This script is used for upscaling the 192x108 images generated by the GAN
# to 768x432


# Defining make_upscaler, which returns a basic NN model for upscaling 192x108 to 768x432
def make_upscaler(in_shape=(108, 192, 3)):
    layer1 = tf.keras.layers.Input(shape=(108, 192, 3))
    layer2 = tf.keras.layers.experimental.preprocessing.Resizing(height=432,
                                                                 width=768,
                                                                 interpolation='mitchellcubic',
                                                                 input_shape=in_shape)(layer1)
    model = tf.keras.Model(inputs=layer1, outputs=layer2)
    optimizer = tf.keras.optimizers.Adam(lr=0.001, beta_1=0.95)
    model.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])
    model.summary()
    return model


# Defining upscale_images, which takes the generated images and upscales them, using
# the model created in make_upscaler
def upscale_images(dataset_lr_array, model, count):
    images_upsc = model.predict(dataset_lr_array)
    for i in range(0, count):
        tf.keras.preprocessing.image.save_img('generatedimages_upscaled/' + str(i+1) + '.jpg', images_upsc[i])


# Defining preprocess_images, used to convert images from integers to floating points
def preprocess_images(dataset):
    dataset = (dataset - 127.5) / 127.5
    return dataset


# Counting the number of files in the generatedimages directory
count_gen = 0
for path in pathlib.Path("generatedimages").iterdir():
    if path.is_file():
        count_gen += 1
print("Number of generated images: " + str(count_gen))

# Loading in the generated images
training_images_gen_list = []
for i in range(1, count_gen+1):
    current_image_gen = tf.keras.preprocessing.image.load_img("generatedimages/" + str(i) + ".jpg")
    current_image_gen_array = tf.keras.preprocessing.image.img_to_array(current_image_gen)
    training_images_gen_list.append(current_image_gen_array)
training_images_gen_array = np.asarray(training_images_gen_list)
training_images_gen_array = preprocess_images(dataset=training_images_gen_array)

# Make the upscaler model, and upscale the images
upsc_model = make_upscaler()
upscale_images(training_images_gen_array, upsc_model, count_gen)
